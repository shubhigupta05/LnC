Chapter - 2 Functions



Assignment 1: The below program is to guess the correct number between 1 to 100


def IsNumber(guessNumber):
    if guessNumber.isdigit() and 1<= int(guessNumber) <=100:
        return True
    else:
        return False

def FindRandomNumber(guessNumber,randomNumber):
    if guessNumber<randomNumber:
        guessNumber=input("Too low. Guess again")
    elif guessNumber>randomNumber:
        guessNumber=input("Too High. Guess again")
    return guessNumber

def main():
    randomNumber=random.randint(1,100)
    correctGuess=False
    guessNumber = input("Guess a number between 1 and 100:")
    incorrectGuess=0
    while not correctGuess:
        if not IsNumber(guessNumber):
            guessNumber=input("I wont count this one Please enter a number between 1 to 100")
            continue
        else:
            incorrectGuess+=1
            guessNumber=int(guessNumber)
        
        if guessNumber == randomNumber:
            print("You guessed it in",incorrectGuess,"guesses!")
            correctGuess=True
        else:
            guessNumber = FindRandomNumber(guessNumber,randomNumber)

main()




Assignment 2: Find the floor of the expected value(mean) of the subarray from Left to Right.

/*
You are given an array of n numbers and q queries. For each query you have to print the floor of the expected value(mean) of the subarray from L to R.
Inputs
First line contains two integers N and Q denoting number of array elements and number of queries.
Next line contains N space seperated integers denoting array elements.
Next Q lines contain two integers L and R(indices of the array).
Output
print a single integer denoting the answer.
*/

using System;
using System.Numerics;
class MyClass {
    static void Main(string[] args)
        {
            int[] arraySize = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);
            long[] inputArray = Array.ConvertAll(Console.ReadLine().Split(' '), long.Parse);

            long[] sumOfArray = ArraySum(arraySize, inputArray);
            Mean(arraySize, sumOfArray);
        }
        public static long[] ArraySum(int[] arraySize, long[] inputArray)
        {
            long[] sumOfArray = new long[arraySize[0] + 1];
            sumOfArray[0] = 0;
            for (int index = 1; index <= arraySize[0]; index++)
            {
                sumOfArray[index] = sumOfArray[index - 1] + inputArray[index - 1];
            }
            return sumOfArray;
        }
        public static void Mean(int[] arraySize, long[] sumOfArray)
        {
            for (int count = 0; count < arraySize[1]; count++)
            {
                var meanNumber = Array.ConvertAll(Console.ReadLine().Split(' '), int.Parse);
                Console.WriteLine((long)((long)(sumOfArray[meanNumber[1]] - sumOfArray[meanNumber[0] - 1]) / (meanNumber[1] - meanNumber[0] + 1)));
            }
        }
}
 
/* Example 
Input
5 3
1 2 3 4 5
1 3
2 4
2 5
Output2
3
3*/


Assignment 3: Customer Data From Database To Excel Sheet


public class CustomerSearch
{
    public List < Customer > SearchByCountry(string country)
    {
        var query = from customerData in db.customers where customerData.Country.Contains(country) orderby customerData.CustomerID ascending select customerData;
		return query.ToList();
	}

	public List < Customer > SearchByCompanyName(string company)
	{
		var query = from customerData in db.customers where customerData.Country.Contains(company) orderby customerData.CustomerID ascending select customerData;
		return query.ToList();
	}

	public List < Customer > SearchByContact(string contact)
	{
		var query = from customerData in db.customers where customerData.Country.Contains(contact) orderby customerData.CustomerID ascending select customerData;
		return query.ToList();
	}

	public string ExportToCSV(List < Customer > data)
	{
		StringBuilder dataInString = new StringBuilder();

		foreach(var item in data)
		{
			dataInString.AppendFormat("{0}, {1}, {2}, {3}", item.CustomerID, item.CompanyName, item.ContactName, item.Country);
			dataInString.AppendLine();
		}

		return dataInString.ToString();
	}
} 



Assignment 4: // Does this Book class follow SRP?  

class Book {
 
    function getTitle() {
        return "A Great Book";
    }
 
    function getAuthor() {
        return "John Doe";
    }
 
    function turnPage() {
        // pointer to next page
    }
 
    function getCurrentPage() {
        return "current page content";
    }
 
    function getLocation() {
        // returns the position in the library
        // ie. shelf number & room number
    }

    function save() {
        $filename = '/documents/'. $this->getTitle(). ' - ' . $this->getAuthor();
        file_put_contents($filename, serialize($this));
    }
}

interface Printer {
    function printPage($page);
}
 
class PlainTextPrinter implements Printer {
    function printPage($page) {
        echo $page;
    }
}

class HtmlPrinter implements Printer {
    function printPage($page) {
        echo '<div style="single-page">' . $page . '</div>';
    }
}

Question:  Does this Book class follow SRP?  
Answer: Yes, because every function and class has one responsibility.



Assignment 5:


Class Employee
{
    int id; 
	string name;
	string department;
	bool working;

	public: saveEmployeeTODatabase()
			printEmployeeDetailReportXML()
			printEmployeeDetailReportCSV()
			terminateEmployee()
			bool isWorking()
};
